{"version":3,"file":"main.ed9182792c97125c2678.bundle.js","sources":["webpack:///../README.vue.md"],"sourcesContent":["export default \"# Kloudless File Picker with Vue\\n\\nKloudless File Picker for your Vue App. We provide:\\n- `Chooser`:\\n  A button component that will launch the Chooser when clicked.\\n- `createChooser`:\\n  A method that accepts your custom component and wraps it in a new one that\\n  launches the Chooser.\\n- `Saver`:\\n  A button component that will launch the Saver when clicked.\\n- `createSaver`:\\n  A method that accepts your custom component and wraps it in a new one that\\n  launches the Saver.\\n- `Dropzone`:\\n  A Dropzone component that will launch the Chooser when clicked or\\n  launch the Saver when files are dropped into it.\\n\\nSupports Vue v2.\\n\\n<!-- STORY -->\\n\\n<!-- STORY HIDE START -->\\n\\n[**Click here to test out our File Picker Vue component interactively**](https://kloudless.github.io/file-picker/vue)\\n\\n<!-- STORY HIDE END -->\\n\\n## Table of contents\\n\\n* [Installation](#installation)\\n* [How It Works](#how-it-works)\\n  * [Chooser](#chooser)\\n    * [Example](#example)\\n  * [createChooser](#createchooser)\\n    * [Example](#example-1)\\n  * [Saver](#saver)\\n    * [Example](#example-2)\\n  * [createSaver](#createsaver)\\n    * [Example](#example-3)\\n  * [Dropzone](#dropzone)\\n    * [Example](#example-4)\\n* [Props](#props)\\n* [Attributes](#attributes)\\n* [Events](#events)\\n* [Set/Get Global Options](#setget-global-options)\\n* [Custom CSS/style](#custom-cssstyle)\\n* [Testing](#testing)\\n\\n## Installation\\n\\n```shell\\nnpm install @kloudless/file-picker\\n```\\n\\n## How It Works\\n\\n<!-- STORY HIDE START -->\\n\\n[**Click here to test out our File Picker Vue component interactively**](https://kloudless.github.io/file-picker/vue)\\n\\n<!-- STORY HIDE END -->\\n\\n### Chooser\\n\\nA button component that wraps the [Chooser](https://github.com/kloudless/file-picker#chooser)\\nview of the File Picker and will launch the Chooser when clicked.\\n\\n#### Example\\n\\n```html\\n<template>\\n  <chooser\\n    :options=\\\"{ 'app_id': 'KLOUDLESS_APP_ID' }\\\"\\n    title=\\\"Click Chooser\\\"\\n    @success=\\\"success\\\"\\n    @addAccount=\\\"addAccount\\\"\\n    @logout=\\\"logout\\\" />\\n</template>\\n\\n<script>\\nimport { Chooser } from '@kloudless/file-picker/vue';\\n\\nexport default {\\n  name: 'app',\\n  components: { Chooser },\\n  methods: {\\n    success(result) { console.log('\\\"success\\\" received', result) },\\n    addAccount(account) { console.log('\\\"addAccount\\\" received', account) },\\n    logout() { console.log('\\\"logout\\\" received') },\\n  },\\n}\\n</script>\\n```\\n\\n### createChooser\\n\\nA method that accepts your custom component and wraps it in a new one that\\nlaunches the Chooser.\\nIt will add a transparent component layer that will catch the click event from\\nthe wrapped component and then launch the Chooser.\\n\\nAll the properties except `options` passed to the new component will be passed\\nto the wrapped component.  \\nAlso, all the events emitted from the wrapped component will be propagated.  \\nIn addition, the new component will emit the [events](#events) that\\nare generated by the Chooser.  \\nA `click` event will be emitted even if the wrapped component doesn't emit one.\\n\\n#### Example\\n\\nFirst, wrap your custom button:\\n```javascript\\nimport { createChooser } from '@kloudless/file-picker/vue';\\nimport MyButton from 'path/to/MyButton';\\n\\nconst MyChooserButton = createChooser(MyButton);\\n\\nexport default MyChooserButton;\\n```\\n\\nUsage:\\n```html\\n<template>\\n  <my-chooser-button\\n    :options=\\\"{ 'app_id': 'KLOUDLESS_APP_ID' }\\\"\\n    @click=\\\"click\\\"\\n    @error=\\\"error\\\"\\n    @success=\\\"success\\\" />\\n</template>\\n```\\n\\n### Saver\\n\\nA button component that wraps the [Saver](https://github.com/kloudless/file-picker#saver)\\nview of the File Picker and will launch the Saver when clicked.\\n\\n#### Example\\n\\n```html\\n<template>\\n  <saver\\n    :options=\\\"{ \\\\\\n      'app_id': 'KLOUDLESS_APP_ID' \\\\\\n      'files': [{ \\\\\\n          'url': 'https://www.app.com/logo.png', \\\\\\n          'name': 'logo.png' \\\\\\n        }, \\\\\\n      }\\\"\\n    title=\\\"Click Saver\\\"\\n    @success=\\\"success\\\"\\n    @addAccount=\\\"addAccount\\\"\\n    @logout=\\\"logout\\\" />\\n</template>\\n\\n<script>\\nimport { Saver } from '@kloudless/file-picker/vue';\\n\\nexport default {\\n  name: 'app',\\n  components: { Saver },\\n  methods: {\\n    success(result) { console.log('\\\"success\\\" received', result) },\\n    addAccount(account) { console.log('\\\"addAccount\\\" received', account) },\\n    logout() { console.log('\\\"logout\\\" received') },\\n  },\\n}\\n</script>\\n```\\n\\n### createSaver\\n\\nA method that accepts your custom component and wraps it in a new one that\\nlaunches the Saver.\\nIt will add a transparent component layer that will catch the click event from\\nthe wrapped component and then launch the Saver.\\n\\nAll the properties except `options` passed to the new component will be passed\\nto the wrapped component.  \\nAlso, all the events emitted from the wrapped component will be propagated.  \\nIn addition, the new component will emit the [events](#events) that\\nare generated by the Saver.  \\nA `click` event will be emitted even if the wrapped component doesn't emit one.\\n\\n#### Example\\n\\nFirst, wrap your custom button:\\n```javascript\\nimport { createSaver } from '@kloudless/file-picker/vue';\\nimport MyButton from 'path/to/MyButton';\\n\\nconst MySaverButton = createSaver(MyButton);\\n\\nexport default MySaverButton\\n```\\n\\nUsage:\\n```html\\n<template>\\n  <my-saver-button\\n    :options=\\\"{ \\\\\\n      'app_id': 'KLOUDLESS_APP_ID' \\\\\\n      'files': [{ \\\\\\n          'url': 'https://www.app.com/logo.png', \\\\\\n          'name': 'logo.png' \\\\\\n        }, \\\\\\n      }\\\"\\n    title=\\\"Click Saver\\\"\\n    @success=\\\"success\\\"\\n    @addAccount=\\\"addAccount\\\"\\n    @logout=\\\"logout\\\" />\\n</template>\\n```\\n\\n### Dropzone\\n\\nA [Dropzone](https://github.com/kloudless/file-picker#dropzone) component that\\nwill launch the Chooser when clicked or launch the Saver when files are dropped.\\n\\n#### Example\\n\\n```html\\n<template>\\n  <dropzone\\n    :options=\\\"{ 'app_id': 'KLOUDLESS_APP_ID' }\\\"\\n    @success=\\\"success\\\"\\n    @addAccount=\\\"addAccount\\\"\\n    @logout=\\\"logout\\\" />\\n</template>\\n\\n<script>\\nimport { Dropzone } from '@kloudless/file-picker/vue';\\n\\nexport default {\\n  name: 'app',\\n  components: { Dropzone },\\n  methods: {\\n    success(result) { console.log('\\\"success\\\" received', result) },\\n    addAccount(account) { console.log('\\\"addAccount\\\" received', account) },\\n    logout() { console.log('\\\"logout\\\" received') },\\n  },\\n}\\n</script>\\n```\\n\\n## Props\\n\\n- `options` _(Required)_  \\n  An object used to configure the File Picker. Requires the Kloudless App ID\\n  at minimum. Refer to the full [File Picker Configuration](https://github.com/kloudless/file-picker#configuration)\\n  for more details on all possible configuration parameters.\\n- `title` _(Optional)_   \\n  The text shown on the button for `Chooser` or `Saver`.\\n  Default value: `Save a file` for `Saver`; `Choose a file` for `Chooser`.\\n\\n## Attributes\\n\\nHere are the DOM element attributes you can set:\\n\\n- `class`\\n  CSS class names.\\n- `style`\\n  CSS styles directly set on the element.\\n- `disabled`\\n  `true` to disable the component.\\n\\n## Events\\n\\nSupports all of the events listed in [Events](https://github.com/kloudless/file-picker#events).\\n\\nIn addition, we support the `click` event:\\n- `click`\\n  Emitted when the component is clicked.\\n\\n## Set/Get Global Options\\n\\n```javascript\\nimport { setGlobalOptions, getGlobalOptions } from '@kloudless/file-picker/vue';\\n\\nsetGlobalOptions({...});\\ngetGlobalOptions();\\n```\\n\\nThe returned data and parameters are the same as for\\n`filePicker.setGlobalOptions()` and `filePicker.getGlobalOptions()`.\\nPlease refer to the\\n[File Picker Methods](https://github.com/kloudless/file-picker#methods)\\nfor more details.\\n\\n## Custom CSS/style\\n\\nBy default, we don't apply any CSS styles to the components.\\nYou have to include CSS files and set `class` or `style` props on your own.\\n\\n## Testing\\n\\nFirst, install dependencies as shown below. This only needs to be\\ndone once:\\n```shell\\n$ npm ci --prefix storybook-vue/\\n```\\n\\nThen, start up the testing server:\\n```shell\\n$ npm run storybook:vue\\n```\\n\\nThe testing server uses a default Kloudless App ID.\\nTo connect accounts to your own Kloudless app, you can change the ID either via\\nthe interactive storybook UI or via an environment variable as shown below:\\n\\n```shell\\n# ABC123 is the App ID\\n$ STORYBOOK_KLOUDLESS_APP_ID=ABC123 npm run storybook:vue\\n```\\n\""],"mappings":"AAAA","sourceRoot":""}